# toy_transformer.py
# Tiny educational decoder-only transformer (character-level) in PyTorch.
# Designed to run quickly on a single GPU or CPU for learning purposes.

import random
import torch
import torch.nn as nn
import torch.nn.functional as F
from pathlib import Path

# -----------------------
# Config / reproducibility
# -----------------------
seed = 1337
random.seed(seed)
torch.manual_seed(seed)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("Using device:", device)

# -----------------------
# Tiny dataset (char-level)
# -----------------------
text = (
    "To be, or not to be, that is the question:\n"
    "Whether 'tis nobler in the mind to suffer\n"
    "The slings and arrows of outrageous fortune,\n"
    "Or to take arms against a sea of troubles\n"
)

chars = sorted(list(set(text)))
vocab_size = len(chars)
itos = {i: ch for i, ch in enumerate(chars)}
stoi = {ch: i for i, ch in itos.items()}

def encode(s): return [stoi[c] for c in s]
def decode(ids): return "".join(itos[i] for i in ids)

data = torch.tensor(encode(text), dtype=torch.long, device=device)
N = data.size(0)
print(f"Dataset length: {N}, Vocab size: {vocab_size}")

# -----------------------
# Batching helper
# -----------------------
block_size = 24  # context length (keep small for speed)
def get_batch(batch_size=4):
    # randomly sample contiguous chunks for training
    ix = torch.randint(0, N - block_size - 1, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+1+block_size] for i in ix])
    return x, y

# -----------------------
# Model components
# -----------------------
class MultiHeadSelfAttention(nn.Module):
    def __init__(self, embed_dim, num_heads, block_size):
        super().__init__()
        assert embed_dim % num_heads == 0
        self.num_heads = num_heads
        self.head_dim = embed_dim // num_heads
        self.scale = self.head_dim ** -0.5

        # single linear layer producing q,k,v concatenated
        self.to_qkv = nn.Linear(embed_dim, 3 * embed_dim)
        self.out_proj = nn.Linear(embed_dim, embed_dim)

        # causal mask (lower-triangular) so tokens cannot attend to future tokens
        self.register_buffer("mask", torch.tril(torch.ones(block_size, block_size)).unsqueeze(0).unsqueeze(0))

    def forward(self, x):
        B, T, C = x.size()
        qkv = self.to_qkv(x)                # (B, T, 3*C)
        q, k, v = qkv.chunk(3, dim=-1)      # split into q,k,v

        # reshape for multi-head attention
        q = q.view(B, T, self.num_heads, self.head_dim).transpose(1, 2)  # (B, heads, T, head_dim)
        k = k.view(B, T, self.num_heads, self.head_dim).transpose(1, 2)
        v = v.view(B, T, self.num_heads, self.head_dim).transpose(1, 2)

        # scaled dot-product attention
        att = (q @ k.transpose(-2, -1)) * self.scale  # (B, heads, T, T)

        # apply mask to prevent attending to future positions
        mask = self.mask[:, :, :T, :T]
        att = att.masked_fill(mask == 0, float('-inf'))

        att = F.softmax(att, dim=-1)
        out = att @ v                                  # (B, heads, T, head_dim)
        out = out.transpose(1, 2).contiguous().view(B, T, C)
        out = self.out_proj(out)
        return out

class FeedForward(nn.Module):
    def __init__(self, embed_dim, hidden_dim):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(embed_dim, hidden_dim),
            nn.GELU(),
            nn.Linear(hidden_dim, embed_dim),
        )
    def forward(self, x):
        return self.net(x)

class TransformerBlock(nn.Module):
    def __init__(self, embed_dim, num_heads, block_size, hidden_dim):
        super().__init__()
        self.attn = MultiHeadSelfAttention(embed_dim, num_heads, block_size)
        self.ln1 = nn.LayerNorm(embed_dim)
        self.ff = FeedForward(embed_dim, hidden_dim)
        self.ln2 = nn.LayerNorm(embed_dim)

    def forward(self, x):
        # Pre-LN transformer block with residuals
        x = x + self.attn(self.ln1(x))
        x = x + self.ff(self.ln2(x))
        return x

class TinyTransformer(nn.Module):
    def __init__(self, vocab_size, block_size, n_layers=1, embed_dim=32, num_heads=2, hidden_dim=128):
        super().__init__()
        self.token_emb = nn.Embedding(vocab_size, embed_dim)
        self.pos_emb = nn.Parameter(torch.zeros(1, block_size, embed_dim))
        self.blocks = nn.ModuleList([TransformerBlock(embed_dim, num_heads, block_size, hidden_dim) for _ in range(n_layers)])
        self.ln_f = nn.LayerNorm(embed_dim)
        self.head = nn.Linear(embed_dim, vocab_size)
        self.block_size = block_size

        # small weight init
        self.apply(self._init_weights)

    def _init_weights(self, module):
        if isinstance(module, nn.Linear):
            nn.init.normal_(module.weight, mean=0.0, std=0.02)
            if module.bias is not None:
                nn.init.zeros_(module.bias)
        elif isinstance(module, nn.Embedding):
            nn.init.normal_(module.weight, mean=0.0, std=0.02)

    def forward(self, idx, targets=None):
        B, T = idx.size()
        tok = self.token_emb(idx)                     # (B,T,embed)
        pos = self.pos_emb[:, :T, :]
        x = tok + pos
        for block in self.blocks:
            x = block(x)
        x = self.ln_f(x)
        logits = self.head(x)                         # (B,T,vocab)
        if targets is None:
            return logits
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1))
        return logits, loss

# -----------------------
# Instantiate and train (very short)
# -----------------------
model = TinyTransformer(vocab_size=vocab_size, block_size=block_size, n_layers=1, embed_dim=32, num_heads=2, hidden_dim=128)
model = model.to(device)
optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3)

model.train()
steps = 10           # keep small so it runs quickly
for step in range(1, steps+1):
    xb, yb = get_batch(batch_size=4)
    logits, loss = model(xb, yb)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    print(f"Step {step}/{steps} - loss: {loss.item():.4f}")

# -----------------------
# Tiny generation example (autoregressive sampling)
# -----------------------
model.eval()
context = torch.tensor(encode("To be, or not to be,"), dtype=torch.long, device=device).unsqueeze(0)
generated = context
generate_steps = 40
with torch.no_grad():
    for _ in range(generate_steps):
        idx = generated[:, -block_size:] if generated.size(1) > block_size else generated
        logits = model(idx)                  # (1, T, vocab)
        probs = F.softmax(logits[:, -1, :], dim=-1)
        next_id = torch.multinomial(probs, num_samples=1)  # sample
        generated = torch.cat([generated, next_id], dim=1)

out = decode(generated[0].tolist())
print("\n--- Generated (toy) ---\n")
print(out)
print("\n--- Done ---\n")
